package com.adminvendor.dao;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.List;
import java.util.Map;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.adminvendor.util.Utility;

@Repository
public class UserDao {

	private final JdbcTemplate jdbcTemplate;

    public UserDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    // This service saves the requested user
    public int saveUser(String email, String password) {
    	 String insertQuery = "INSERT INTO `user`(`email`, `password`) VALUES(?, ?);";
         // KeyHolder to capture the generated ID
         KeyHolder keyHolder = new GeneratedKeyHolder();
         jdbcTemplate.update(connection -> {
             PreparedStatement ps = connection.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
             ps.setString(1, email);
             ps.setString(2, password);
             return ps;
         }, keyHolder);
         System.out.println(keyHolder.getKey().intValue());
         // Return the generated ID
         return keyHolder.getKey().intValue();
    }
    
    public int updateUserDetails(int id, String name, String partnerName, String address) {
    	String sql = "UPDATE `user` SET name = ?, partner_name=?, address=? WHERE id = ?";
        return jdbcTemplate.update(sql, name, partnerName, address, id);
    }
    
    public int updateUserPassword(int id, String password) {
    	String sql = "UPDATE `user` SET password = ? WHERE id = ?";
        return jdbcTemplate.update(sql, password, id);
    }
    
    public boolean verifyEmail(String email) {
    	String verifyEmailQuery = "Select id from `user` where email=?";
    	try {
    		// Query will return a list of results, each row is a Map
            List<Map<String, Object>> result = jdbcTemplate.queryForList(verifyEmailQuery, email);
            // If list is not empty, that means the email exists in the table
            return !result.isEmpty();
        } catch (EmptyResultDataAccessException e) {
            // If no result is found (empty result set), return false
            return false;
        }
    }
    
    public Map<String, Object> checkLogin(String email, String password) {
    	String selectQuery = "Select * from `user` where email=? and password=?";
    	// Execute the query and retrieve results
        List<Map<String, Object>> result = jdbcTemplate.queryForList(selectQuery, email, password);
        // Return the first result if the list is not empty, otherwise return null or an empty map
        return Utility.isNullOrEmpty(result) ? null : result.get(0);
    }
    
    public int saveToken(int user, String token) {
    	String insertQuery = "INSERT INTO `user_login`(`user`, `token`) VALUES(?, ?);";
        // KeyHolder to capture the generated ID
        KeyHolder keyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update(connection -> {
            PreparedStatement ps = connection.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
            ps.setInt(1, user);
            ps.setString(2, token);
            return ps;
        }, keyHolder);
        System.out.println(keyHolder.getKey().intValue());
        // Return the generated ID
        return keyHolder.getKey().intValue();
    }
    
    public Map<String, Object> getTokenData(String token) {
    	String selectQuery = "Select * from `user_login` where token=?";
    	// Execute the query and retrieve results
    	List<Map<String, Object>> result = jdbcTemplate.queryForList(selectQuery, token);
        // Return the first result if the list is not empty, otherwise return null or an empty map
        return Utility.isNullOrEmpty(result) ? null : result.get(0);
    }
    
    public Map<String, Object> getUser(int userId) {
    	String selectQuery = "Select * from `user` where id=?";
    	// Execute the query and retrieve results
        List<Map<String, Object>> result = jdbcTemplate.queryForList(selectQuery, userId);
        // Return the first result if the list is not empty, otherwise return null or an empty map
        return Utility.isNullOrEmpty(result) ? null : result.get(0);
    }
    
}
